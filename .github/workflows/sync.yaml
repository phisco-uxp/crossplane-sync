name: Sync With Upstream Crossplane
on:
  workflow_dispatch: {}
  schedule:
    # run every 6 hours
    - cron: '0 */6 * * *'
env:
  UPSTREAM: https://github.com/crossplane/crossplane.git
  SUPPORTED_RELEASES: ${{ vars.SUPPORTED_RELEASES || 3 }}

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    #if: github.repository == 'upbound /crossplane'
    outputs:
      branches: ${{ steps.get-releases.outputs.branches }}
    steps:
      - name: Checkout
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3
        with:
          fetch-depth: 0

      - name: Set upstream repository name
        run: |
          git remote add upstream $UPSTREAM
          git fetch upstream

      - name: Get Last Upstream Releases
        id: get-releases
        shell: bash
        ## find the N latest supported releases and their latest patch releases, storing them in the steps' outputs
        # N defaults to 3 if not specified via the SUPPORTED_RELEASES environment variable
        run: |
          # Get the list of supported release branches from the upstream repository
          supported_releases=$(git for-each-ref --sort='-committerdate' --format='%(refname:short)' --count=$SUPPORTED_RELEASES "refs/remotes/upstream/release-*" | sed 's/.*\///')
          if [ -z "$supported_releases" ]
          then
            echo "DEBUG: No supported releases found"
            echo "DEBUG: $(git for-each-ref 'refs/remotes')"
            exit 1
          fi

          # add master to the supported releases
          branches="master $supported_releases"

          echo "DEBUG: ${branches}"

          # build a JSON formatted list of all the supported releases for crossplane/crossplane
          branches=$(echo $branches | jq -R .| jq -s -c '.[] | split(" ")')

          # store everything as outputs
          echo "branches=${branches}" >> $GITHUB_OUTPUT

          echo "DEBUG: GITHUB_OUTPUT:"
          cat $GITHUB_OUTPUT

  check-matrix:
    # this job is just to check the matrix definition is valid and helps debugging it if not valid
    runs-on: ubuntu-latest
    needs:
      - generate-matrix
    steps:
      - name: Check Matrix Definition
        shell: bash
        run: |
          branches='${{ needs.generate-matrix.outputs.branches }}'
          echo $branches
          echo $branches | jq .

  sync:
    permissions:
      contents: write
    needs:
      - check-matrix
      - generate-matrix
    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJSON(needs.generate-matrix.outputs.branches) }}

    runs-on: ubuntu-latest
    steps:
      - name: Generate a token
        id: generate_token
        uses: tibdex/github-app-token@v1.8.0
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3
        with:
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}

      - name: Sync The Branch
        run: |
          set -x
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git remote add upstream $UPSTREAM
          ./hack/uxp/fork.sh sync_branch "${{ matrix.branch }}"
